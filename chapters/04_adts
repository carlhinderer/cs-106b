-------------------------------------------------
CHAPTER 4 - ABSTRACT DATA TYPES
-------------------------------------------------

- ADTs

    'Abstract data types' are types defined in terms of their behavior
      rather then their representation.

    The ADTs created in this chapter are inspired by the C++ STL (Standard
      Template Library) classes.  They are a somewhat simplified version
      of them.



- The 'Vector' ADT

    Arrays:
      1. are allocated with a particular fixed size
      2. programmers have to keep track of the size
      3. inserting or deleting elements requires a fair amount of code
      4. no bounds checking

    Vectors:
      1. dynamically resizing
      2. keep track of their length
      3. easy to insert or delete
      4. include bounds checking


    Vectors are 'collection classes' (aka 'container classes'), so the type they
      contain must be specified.  The type is called the 'base type' and classes
      that include a base type specification are known as 'parameterized classes'.


    // Declare and use a new vector object
    Vector<int> vec;
    vec.add(10);
    vec.setAt(0, 20);
    vec[0] = 30;
    vec.removeAt(0);

    // Vector methods
    size()
    isEmpty()
    getAt(index)
    setAt(index, value)
    add(value)
    insertAt(index, value)
    removeAt(index)
    clear()
    iterator()


    // Pass Vector as a parameter
    // Note the default is to pass by copy, but we pass by reference here, since
    //   it's more efficient and we can mutate it.
    void PrintVector(Vector<int> & vec) { ... }



- Example - File Reverser

    /*
     * File: revfile.cpp
     * -----------------
     * This program reads in a text file and then displays the lines of
     * the file in reverse order.
     */
    #include "genlib.h"
    #include "simpio.h"
    #include "vector.h"
    #include <string>
    #include <iostream>
    #include <fstream>

    /* Function prototypes */
    void ReadTextFile(ifstream & infile, Vector<string> & lines);
    void AskUserForInputFile(string prompt, ifstream & infile);
    void PrintReversed(Vector<string> & lines);

    /* Main program */
    int main() {
        ifstream infile;
        AskUserForInputFile("Input file: ", infile);
        Vector<string> lines;
        ReadTextFile(infile, lines);
        infile.close();
        PrintReversed(lines);
        return 0;
    }

    /*
     * Reads an entire file into the Vector<string> supplied by the user.
     */
    void ReadTextFile(ifstream & infile, Vector<string> & lines) {
        while (true) {
            string line;
            getline(infile, line);
            if (infile.fail()) break;
            lines.add(line);
        }
    }

    /*
     * Opens a text file whose name is entered by the user.  If the file
     * does not exist, the user is given additional chances to enter a
     * valid file.  The prompt string is used to tell the user what kind
     * of file is required.
     */
    void AskUserForInputFile(string prompt, ifstream & infile) {
        while (true) {
            cout << prompt;
            string filename = GetLine();
            infile.open(filename.c_str());
            if (!infile.fail()) break;
            cout << "Unable to open " << filename << endl;
            infile.clear();
        }
    }

    /*
     * Prints the lines from the Vector<string> in reverse order.
     */
    void PrintReversed(Vector<string> & lines) {
        for (int i = lines.size() - 1; i >= 0; i--) {
            cout << lines[i] << endl;
        }
    }



- The 'Grid' ADT

    The Grid class is used to implement 2D arrays.

    // 3 rows, 2 columns
    Grid<double> matrix(3, 2);

    // Initialize
    for (int i=0; i < matrix.numRows(); i++) {
        for (int j=0; j M matrix.numCols(); j++) {
            matrix[i][j] = 0;
        }
    }


    // Grid methods
    numRows()
    numCols()
    getAt(row, col)
    setAt(row, col, value)
    resize(rows, cols)
    iterator()



- Example - Determine Winner of Tic-Tac-Toe Game

    /* 
     * Checks to see whether the specified player identified by mark 
     * ('X' or 'O') has won the game.  To reduce the number of special 
     * cases, this implementation uses the helper function CheckLine. 
     */

    bool CheckForWin(Grid<char> & board, char mark) {
        for (int i=0; i < 3; i++) {
            if (CheckLine(board, mark, i, 0, 0, 1)) return true;
            if (CheckLine(board, mark, 0, i, 1, 0)) return true;
        }
        if (CheckLine(board, mark, 0, 0, 1, 1)) return true;
        return CheckLine(board, mark, 2, 0, -1, 1);
    }

    /* 
    * Checks a line extending across the board in some direction.  The 
    * starting coordinates are given by the row and col parameters. 
    * The direction of motion is specified by dRow and dCol, which 
    * show how to adjust the row and col values on each cycle.  For 
    * rows, dRow is always 0; for columns,  dCol is 0.  For diagonals, 
    * these values will be +1 or -1 depending on the direction. 
    */

    bool CheckLine(Grid<char> & board, char mark, int row, int col, 
                   int dRow, int dCol) {
        for (int i=0; i < 3 i++) {
            if (board[row][col] != mark) return false;
            row += dRow;
            col += dCol;
        }
    }



- The 'Stack' ADT

    Stacks are LIFO objects.  Adding an object is 'pushing' it onto the stack.
      Removing an object is 'popping' it off the stack.  Stacks are useful in 
      programming, because nested function calls behave in a stack-oriented
      fashion.

    // Create a stack
    Stack<int> myStack;

    // Stack methods
    size()
    isEmpty()
    push(value)
    pop()
    peek()
    clear()



- The 'Queue' ADT

    Queues are FIFO objects.  Adding an object is 'enqueueing' it.  Removing
      an object is 'dequeueing' it.  

    // Create a queue
    Queue<int> muQueue;

    // Queue methods
    size()
    isEmpty()
    enqueue(value)
    dequeue()
    peek()
    clear()



- The 'Map' ADT

    The map class used in this book uses strings as keys by default, so only
      the value type is specified.  Arrays implemented using maps are called
      'associative arrays'.

    // Create a map <string, double>
    Map<double> symbolTable;

    // Map methods
    size()
    isEmpty()
    put(key, value)
    get(key)
    remove(key)
    containsKey(key)
    clear()
    iterator()



- The 'Lexicon' Class

    The lexicon class used in this book is similar to a set of strings, but you
      pass in a filename of words that the class will read in.

    // Create a lexicon
    Lexicon english("EnglishWords.dat");

    // Lexicon methods
    size()
    isEmpty()
    add(word)
    addWordsFromFile(name)
    containsWord(word)
    containsPrefix(prefix)
    clear()
    iterator()



- The 'Scanner' Class

    The scanner class used in this book is a string tokenizer.

    // Create new scanner object
    Scanner scanner;

    // Initialize the input to be scanned
    scanner.setInput(str);

    // Read tokens from the scanner
    while (scanner.hasMoreTokens()) {
        string token = scanner.nextToken();
    }

    // Scanner methods
    setInput(str)
    setInput(stream)

    hasMoreTokens()
    nextToken()
    saveToken(token)

    setSpaceOption(option)
    getSpaceOption()
    setNumberOption(option)
    getNumberOption()
    setStringOption(option)
    getStringOption()
    setBracketOption(option)
    getBracketOption()



- Using iterators

    // Iterate over the words in a lexicon
    Lexicon::Iterator iter = english.iterator();
    while (iter.hasNext()) {
        string word = iter.next();
    }

    // This book's collection classes also support 'foreach' syntax
    foreach (string word in english) {
        if (word.length() == 2) {
            cout << word << endl;
        }
    }


    Iterator Orders:
      - vector  = in order of the elements in the vector
      - grid    = row-major order
      - map     = no order guaranteed
      - lexicon = alphabetical order



- Algorithm for shuffling an array

    // For each position p1 in the array, pick a random position p2
    //   between p1 and the end of the array.  Then, exchange the
    //   values at positions p1 and p2.

    int deckSize = 52;
    for (int i=0; i < deckSize; i++) {
        int pos = RandomInteger(i, deckSize-1);
        SwapElements(i, pos);
    }