-------------------------------------------------
CHAPTER 3 - LIBRARIES AND INTERFACES
-------------------------------------------------

- C++ Interfaces

    mylib.h = Interface
    mylib.cpp = Implementation

    Interfaces should be:
      1. Unified
      2. Simple
      3. Sufficient
      4. General
      5. Stable



- random.h Interface (Comments are useful for clients)

    /*
     * File: random.h
     * --------------
     * This interface provides several functions for generating
     * pseudorandom numbers.
     */

    #ifndef _random_h
    #define _random_h

    /*
     * Function: RandomInteger
     * Usage: n = RandomInteger(low, high);
     * ------------------------------------
     * This function returns a random integer in the range low to high,
     * inclusive.
     */

    int RandomInteger(int low, int high);

    /*
     * Function: RandomReal
     * Usage: d = RandomReal(low, high);
     * ---------------------------------
     * This function returns a random real number in the half-open
     * interval [low .. high), meaning that the result is always
     * greater than or equal to low but strictly less than high.
     */

    double RandomReal(double low, double high);

    /*
     * Function: RandomChance
     * Usage: if (RandomChance(p)) . . .
     * ---------------------------------
     * The RandomChance function returns true with the probability
     * indicated by p, which should be a floating-point number between
     * 0 (meaning never) and 1 (meaning always).  For example, calling
     * RandomChance(.30) returns true 30 percent of the time.

     bool RandomChance(double p);

    /*
     * Function: Randomize
     * Usage: Randomize();
     * -------------------
     * This function initializes the random-number generator so that
     * its results are unpredictable.  If this function is not called,
     * the other functions will return the same values on each run.
     */

    void Randomize();

    #endif



- cstdlib Random Number Usage

    // Get a random number
    int rand();

    // Constant that defines machine-specific max integer
    RAND_MAX

    // Set seed to current system time
    srand(int(time(NULL)));



- random.cpp Implementation (Comments are useful for implementers)

    /*
     * File: random.cpp
     * -----------------
     * This file implements the random.h interface.
     */

    #include <cstdlib>
    #include <ctime>
    #include "random.h"

    /*
     * Function: RandomInteger
     * -----------------------
     * This function begins by using rand to select an integer
     * in the interval [0, RAND_MAX] and then converts it to the
     * desired range by applying the following steps:
     *
     * 1. Normalize the value to a real number in the interval [0, 1)
     * 2. Scale the resulting value to the appropriate range size
     * 3. Truncate the scaled value to an integer
     * 4. Translate the integer to the appropriate starting point
     */

    int RandomInteger(int low, int high) {
        double d = double(rand()) / (double(RAND_MAX) + 1);
        int k = int(d * (high - low + 1));
        return low + k;
    }

    /*
     * Function: RandomReal
     * --------------------
     * The implementation of RandomReal is similar to that
     * of RandomInteger, without the truncation step.
     */

    double RandomReal(double low, double high) {
        double d = double(rand()) / (double(RAND_MAX) + 1);
        return low + d * (high - low);
    }

    /*
     * Function: RandomChance
     * ----------------------
     * This function uses RandomReal to generate a real number
     * in the interval [0, 1) and then compares that value to p.
     */

    bool RandomChance(double p) {
        return RandomReal(0, 1) < p;
    }
    
    /*
     * Function: Randomize
     * -------------------
     * This function operates by setting the random number
     * seed to the current time.  The srand function is
     * provided by the <cstdlib> library and requires an
     * integer argument.  The time function is exported by
     * the <ctime> interface.
     */

    void Randomize() {
        srand(int(time(NULL)));
    }



- Steps To Get Random Integer, Explained

    0. Use rand() to get an integer between 0 and MAX_SIZE

    1. Normalize  = convert integer result from rand() to a random floating point 
                    value d in the interval [0, 1)

    2. Scale      = multiply d by the size of the desired range, so that it spans the
                    correct number of integers

    3. Truncate   = use type cast to conver to integer by throwing away fractional
                    part

    4. Translate  = add the value to 'low' so that the range begins a the desired
                    lower bound



- C++ Strings

    #include <string>

    // Concatenation
    string str1 = "Hello";
    string str2 = str1 + " World";

    // Copies contents, but variables remain independent
    str2 = str1;

    // Legicograpic Comparison
    if (str1 == str2) ...

    // String length
    int numChars = str1.length();

    // Other common string methods
    str[pos]
    str.substr(pos, len)
    str.find(ch, pos)
    str.find(pattern, pos)
    str.insert(pos, txt)
    str.replace(pos, count, txt)

    // Sometimes you need a C-style string to interface with older code
    string str = "Hello";
    char *cstr = str.c_str();



- Using File Streams

    1. Declare a stream variable

        ifstream infile;
        ofstream outfile;

    2. Open the file

        infile.open("jabberwocky.txt");

        // Note that if you have the file name in a variable,
        //   must pass c-string version of it
        string fileName = "jabberwocky.txt";
        infile.open(fileName.c_str());

        // If opening a file fails, and you want to try again, must
        //   clear the stream first.
        if (infile.fail()) Error("Could not open file.");
        infile.clear();

    3. Transfer the data

    4. Close the file

        infile.close();



- Standard Streams

    cin  = standard input stream
    cout = standard output stream
    cerr = standard error stream



- Stream Examples

    // Formatted stream output
    outfile << "some text " << num << endl;

    // Formatted stream input
    int num;
    infile >> num;


    // Example - Read and sum numbers in a file until end is reached
    int total, num;
    total = 0;

    while(true) {
        infile >> num;
        if (infile.fail()) break;
        total += num;
    }


    // EOF character is returned at the end of a file when using get()
    void CopyFile(istream & infile, ostream & outfile) {
        int ch;

        while ((ch = infile.get()) != EOF) {
            outfile.put(ch);
        }
    }


    // Can go backwards a character with the unget() method
    // For instance, if you're parsing and looking for a 2-character sequence
    infile.unget()



- Example - Copy Removing Comments

    void CopyRemovingComments(ifstream & infile, ofstream & outfile) {
        ing ch, nch;
        bool commentFlag;

        commentFlag = false;
        while ((ch = infile.get()) != EOF) {
            if(commentFlag) {
                if (ch == '*') {
                    nch = infile.get();
                    if (nch == '/') {
                        commentFlag = false;
                    } else {
                        infile.unget();
                    }
                }
            } else {
                if (ch == '/') {
                    nch = infile.get();
                    if (nch == '*') {
                        commentFlag = true;
                    } else {
                        infile.unget();
                    }
                if (!commentFlag) outfile.put(ch);
            }
        }
    }



- Common Operations

    // Common operations for all streams
    file.open(filename)
    file.close()
    file.fail()
    file.clear()

    // Common operations for input streams
    infile.get()
    infile.unget()
    getline(infile, str)
    infile >> var

    // Common operations for output streams
    outfile.put(ch)
    outfile << expr



- Other ANSI Libraries

    // 'cctype' interface functions
    isupper(ch)
    islower(ch)
    isalpha(ch)

    isdigit(ch)
    isalnum(ch)

    ispunct(ch)
    isspace(ch)
    isprint(ch)

    toupper(ch)
    tolower(ch)


    // 'math' interface functions
    fabs(x)
    floor(x)
    ceil(x)
    fmod(x, y)

    sqrt(x)
    pow(x, y)
    exp(x)
    log(x)

    sin(theta)
    cos(theta)
    atan(x)
    atan2(y, x)