-------------------------------------------------
CHAPTER 3 - LIBRARIES AND INTERFACES
-------------------------------------------------

- C++ Interfaces

    mylib.h = Interface
    mylib.cpp = Implementation

    Interfaces should be:
      1. Unified
      2. Simple
      3. Sufficient
      4. General
      5. Stable



- random.h Interface (Comments are useful for clients)

    /*
     * File: random.h
     * --------------
     * This interface provides several functions for generating
     * pseudorandom numbers.
     */

    #ifndef _random_h
    #define _random_h

    /*
     * Function: RandomInteger
     * Usage: n = RandomInteger(low, high);
     * ------------------------------------
     * This function returns a random integer in the range low to high,
     * inclusive.
     */

    int RandomInteger(int low, int high);

    /*
     * Function: RandomReal
     * Usage: d = RandomReal(low, high);
     * ---------------------------------
     * This function returns a random real number in the half-open
     * interval [low .. high), meaning that the result is always
     * greater than or equal to low but strictly less than high.
     */

    double RandomReal(double low, double high);

    /*
     * Function: RandomChance
     * Usage: if (RandomChance(p)) . . .
     * ---------------------------------
     * The RandomChance function returns true with the probability
     * indicated by p, which should be a floating-point number between
     * 0 (meaning never) and 1 (meaning always).  For example, calling
     * RandomChance(.30) returns true 30 percent of the time.

     bool RandomChance(double p);

    /*
     * Function: Randomize
     * Usage: Randomize();
     * -------------------
     * This function initializes the random-number generator so that
     * its results are unpredictable.  If this function is not called,
     * the other functions will return the same values on each run.
     */

    void Randomize();

    #endif



- cstdlib Random Number Usage

    // Get a random number
    int rand();

    // Constant that defines machine-specific max number
    RAND_MAX

    // Set seed to current system time
    srand(int(time(NULL)));



- random.cpp Implementation (Comments are useful for implementers)

    /*
     * File: random.cpp
     * -----------------
     * This file implements the random.h interface.
     */

    #include <cstdlib>
    #include <ctime>
    #include "random.h"

    /*
     * Function: RandomInteger
     * -----------------------
     * This function begins by using rand to select an integer
     * in the interval [0, RAND_MAX] and then converts it to the
     * desired range by applying the following steps:
     *
     * 1. Normalize the value to a real number in the interval [0, 1)
     * 2. Scale the resulting value to the appropriate range size
     * 3. Truncate the scaled value to an integer
     * 4. Translate the integer to the appropriate starting point
     */

    int RandomInteger(int low, int high) {
        double d = double(rand()) / (double(RAND_MAX) + 1);
        int k = int(d * (high - low + 1));
        return low + k;
    }

    /*
     * Function: RandomReal
     * --------------------
     * The implementation of RandomReal is similar to that
     * of RandomInteger, without the truncation step.
     */

    double RandomReal(double low, double high) {
        double d = double(rand()) / (double(RAND_MAX) + 1);
        return low + d * (high - low);
    }

    /*
     * Function: RandomChance
     * ----------------------
     * This function uses RandomReal to generate a real number
     * in the interval [0, 1) and then compares that value to p.
     */

    bool RandomChance(double p) {
        return RandomReal(0, 1) < p;
    }
    
    /*
     * Function: Randomize
     * -------------------
     * This function operates by setting the random number
     * seed to the current time.  The srand function is
     * provided by the <cstdlib> library and requires an
     * integer argument.  The time function is exported by
     * the <ctime> interface.
     */
    void Randomize() {
        srand(int(time(NULL)));
    }